<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Android on </title>
    <link>https://www.adamormsby.com/tags/android/</link>
    <description>Recent content in Android on </description>
    <image>
      <title></title>
      <url>https://www.adamormsby.com/site-img/rssIcon.png</url>
      <link>https://www.adamormsby.com/site-img/rssIcon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Feb 2023 06:00:00 -0600</lastBuildDate>
    <atom:link href="https://www.adamormsby.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Per-App Language Preferences in Android 13</title>
      <link>https://www.adamormsby.com/posts/016-android-13-localization-per-app-language-preferences/</link>
      <pubDate>Mon, 06 Feb 2023 06:00:00 -0600</pubDate>
      <guid>https://www.adamormsby.com/posts/016-android-13-localization-per-app-language-preferences/</guid>
      <description>Finally, some localization updates for Android! Android 13 was released in the summer of 2022, and it has &lt;em&gt;a ton&lt;/em&gt; of cool new stuff to work with. Today, I&amp;rsquo;ll share a small piece I&amp;rsquo;m passionate about - per-app language settings.</description>
      <content:encoded><![CDATA[<p>Finally, some localization updates for Android! Android 13 was released in the summer of 2022, and it has <em>a ton</em> of cool new stuff to work with. Today, I&rsquo;ll share a small piece I&rsquo;m passionate about - per-app language settings.</p>
<p>Up until now, the active locale of a device was based solely on the device&rsquo;s system-wide language settings. Supporting any kind of in-app option required building custom language pickers and managing user settings in our app&rsquo;s preference cache. This has been somewhat improved with per-app language settings, and I&rsquo;m hoping we continue to see more support in this area. Localization can play a huge part in product acceptance and market expansion, and the less custom stuff we have to build, the less we have to maintain down the line.</p>
<p>I had planned to write this post as more of an intro to configuring per-app language settings because I find the documentation to be a bit chaotic and hard to follow. But as I was gathering materials for that work, I found that the Android devs beat me to it! Not only have they blogged about it, but they&rsquo;ve also added more info to the developer docs since the initial release - though I have to say, it&rsquo;s still hard to follow with all the warnings and in-page links and&hellip; maybe just start with the blog post that I linked below.</p>
<p>So instead of that post, what I&rsquo;ll do for you instead is give a short overview of the API updates - what&rsquo;s provided and what isn&rsquo;t - share some sample code, and talk a bit about what I think is missing from all this.</p>
<h2 id="recommended-android-resources">Recommended Android Resources</h2>
<p>If you want to get more familiar with the new feature before reading on, here are the Android developer resources I recommend you look at:</p>
<ul>
<li><a href="https://android-developers.googleblog.com/2022/11/per-app-language-preferences-part-1.html">Android Developers Blog - Per-App Language Preferences - Part 1</a> - basically, the post I sat down to write!</li>
<li><a href="https://developer.android.com/guide/topics/resources/app-languages">Android Docs - Per-App Language Preferences</a> - messy, but good info if you&rsquo;re patient</li>
</ul>
<p>And here are two great videos sadly buried in the docs - one an overview of the per-app setting, and one a great intro into internationalization on Android.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/DUKnNWwcNvo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Tq7TSUzAGm8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="api-feature-overview">API Feature Overview</h2>
<h3 id="whats-improved">What&rsquo;s improved?</h3>
<h4 id="application-language-settings-can-now-be-system-managed">Application language settings can now be system-managed</h4>
<p>This is big! After configuring per-app language settings, we can delegate managing a user&rsquo;s language settings to Android&rsquo;s system processes and stop worrying about managing language preferences ourselves. Unless you have special needs, you can throw out your custom-built system - you don&rsquo;t need to maintain it anymore! Let the App Info page handle it for you.</p>
<figure class="align-center "><a href="img/app-language-settings.png">
    <img loading="lazy" src="img/app-language-settings.png#center"
         alt="Android per app language settings"/> </a>
</figure>

<h4 id="android-now-provides-purpose-built-classes-to-manage-active-locales">Android now provides purpose-built classes to manage active locales</h4>
<p>Static functions provided by the <code>AppCompatDelegate</code> and <code>LocaleManagerCompat</code> classes are now available to get, set, and store application locales, and between the two of them, you get access to all application- and system-level locale information you need. No more messing about with Java&rsquo;s <code>Locale</code> class and forgetting to also update your active resource configuration - keep things simple with Android&rsquo;s API.</p>
<h4 id="all-of-this-is-backward-compatible">All of this is backward compatible</h4>
<p>If you use all the new classes and rely on the system to do the work, you can configure applications built for older versions of Android to also have most of the functionality of these features. Users won&rsquo;t get the language selection option on your App Info page (oh well), but because you&rsquo;ve configured the storage in your Manifest, you can use <code>AppCompatDelegate</code> to set and get locale info your users may have selected through a language picker or some other method.</p>
<p>This is particularly nice because it shows that Android is working to provide the per-app language experience to as many people as it can. I&rsquo;m not sure how far back the compatibility goes, but I expect this could impact a lot of projects.</p>
<h3 id="whats-missing">What&rsquo;s missing?</h3>
<h4 id="theres-still-no-in-app-language-picker">There&rsquo;s still no in-app language picker</h4>
<p>I sort of understand this one. Every app is different, and there&rsquo;s no good way to provide a language picker that everyone will want to use. We&rsquo;d probably still see a bunch of custom implementations anyway. Honestly, I&rsquo;m not convinced in-app language changes are something Android ever really intended to support - at least not without jumping through hoops. Even official Android documentation pushed developers to use the system-level locale and do full restarts to reload with a new language. And the per-app settings are great, but they&rsquo;re still managed at a system level. I don&rsquo;t know if a language picker is on their radar. You&rsquo;ll still be building your own, thank you very much.</p>
<p>All this being said, you can absolutely navigate from your app directly to its system-managed language settings! It may not provide an ideal user experience, but the option is there. LinkedIn did it, which lines up with their track record on UX&hellip; but sometimes laziness can be good. I kind of like it.</p>
<figure class="align-center "><a href="img/linkedin-language-flow">
    <img loading="lazy" src="img/linkedin-language-flow.png#center"
         alt="LinkedIne Android per app language flow"/> </a>
</figure>

<h4 id="configuration-is-pretty-clean-but-also-theres-potentially-a-lot-of-it">Configuration is pretty clean&hellip; but also there&rsquo;s potentially a lot of it</h4>
<p>Initial configuration is not too bad - add the correct Compat libraries, create a locale XML file, update your manifest for backward compatibility, and add new API code to your app where needed. But how do you populate a language picker? None of those files generate in-app files for you to use, and I haven&rsquo;t yet seen a function to retrieve all available app locales at runtime. You&rsquo;ll need at least one other file for your language list, and maybe you&rsquo;ll need duplicate lists to display language names for different locales. You get it all in and publish.</p>
<p>Now, you want to add a language to your application. Good luck remember all the files you need to add it to. It may not sound like much, but it&rsquo;s like updating a single string in ten places. Will you remember to update them all? And will you notice if you don&rsquo;t? Again, I love this feature. I&rsquo;m just not a fan of how clunky it may end up being to use.</p>
<p>(I&rsquo;ve built <a href="https://github.com/aormsby/android-locale-resource-generator">a little plugin</a> that may help with some aspects of this, though! More on that in my next post.)</p>
<h4 id="this-feature-feels-incomplete">This feature feels incomplete</h4>
<p>The documentation for the feature was crammed onto a single page, it&rsquo;s filled with caveats about <a href="https://developer.android.com/guide/topics/resources/app-languages#known-issues">confusing known issues</a>, and there don&rsquo;t seem to be any finalized, stable libraries for us to import into our projects with confidence. I mean, who wants to use the questionable <code>Appcompat 1.6.0-beta01</code> or higher? Is it safe? Are we going to have to update when something stable arrives? No idea.</p>
<p>Listen - I&rsquo;m still excited about this feature, and you should be, too! But I&rsquo;m also keeping an eye out for updates.</p>
<h2 id="sample-project">Sample Project</h2>
<p>As promised, I have a sample project for you! I updated my <code>l10n_samples</code> project with support for per-app language preferences, and I added a page with a super simple language picker. You can change the language to watch the app update in real time. Bonus - since the new locale changer updates the whole app, you no longer need to update the system language to test out the other samples. (Knew I&rsquo;d get that in there eventually!)</p>




<form action=https://github.com/aormsby/android-l10n-samples target="_blank">
    <button class="button" style="margin: 18px 0px; padding: 12px; display: flex; align-items: center; justify-content: flex-start;" type="submit">
        <img src="/octocat-filled.svg" alt="Github logo" width="32px" style="margin: 0px 12px 0px 0px;" />
        <p style="margin: 0;">View  &#39;Android Localization Samples&#39;  on Github</p>
    </button>
</form>

<figure class="align-center "><a href="img/locale-changer-sample.gif">
    <img loading="lazy" src="img/locale-changer-sample.gif#center"
         alt="Gif showing sample locale changer" height="800px"/> </a>
</figure>

<p>Thanks for reading, and I hope you got something useful out of my love for internationalization. I would <em>love</em> to answer questions and chat about this new feature, so please comment with anything you have, and we can nerd out about all this together. Happy coding!</p>
]]></content:encoded>
    </item>
    <item>
      <title>Localization - Formatting Dates on Android</title>
      <link>https://www.adamormsby.com/posts/013-android-localization-formatting-dates/</link>
      <pubDate>Mon, 28 Mar 2022 06:00:00 -0600</pubDate>
      <guid>https://www.adamormsby.com/posts/013-android-localization-formatting-dates/</guid>
      <description>Hey everybody, let&amp;rsquo;s talk localization! Today, I want to look at date formatting for Android applications. When you want to display a date in your app, you have to keep in mind that your customers in different locales will expect dates to look the way they&amp;rsquo;re used to seeing them. But while there are a lot of date formatting options on Android, they aren&amp;rsquo;t all robust enough to &amp;lsquo;just work&amp;rsquo; the way you need them to. I&amp;rsquo;ll show you a how to get you exactly the format you want every time.</description>
      <content:encoded><![CDATA[<p>Hey everybody, let&rsquo;s talk localization! It&rsquo;s a passion of mine that I&rsquo;d like to spend more time on, and I want to share some tips and tricks I&rsquo;ve picked up in my work. Hopefully, this is only the first of many localization posts to come. Keep an eye out for more in the future!</p>




<form action=https://github.com/aormsby/android-l10n-samples target="_blank">
    <button class="button" style="margin: 18px 0px; padding: 12px; display: flex; align-items: center; justify-content: flex-start;" type="submit">
        <img src="/octocat-filled.svg" alt="Github logo" width="32px" style="margin: 0px 12px 0px 0px;" />
        <p style="margin: 0;">View  &#39;Android Localization Samples&#39;  on Github</p>
    </button>
</form>

<p>Today, I want to look at <em><strong>date formatting</strong></em> for Android applications. When you want to display a date in your app, you have to keep in mind that your customers in different locales will expect dates to look the way they&rsquo;re used to seeing them. But while there are a lot of date formatting options on Android, they aren&rsquo;t all robust enough to &lsquo;just work&rsquo; the way you need them to.</p>
<p>So first, let&rsquo;s take a look at two common solutions that aren&rsquo;t as great as they seem. Then I&rsquo;ll show you a how to get you exactly the format you want every time.</p>
<h2 id="localdate-localtime-localdatetime---from-javatime">LocalDate, LocalTime, LocalDateTime - from java.time</h2>
<p>These newer Java 8 time classes were built to take the place of the old, clunky <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Date.html">Date</a>, <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html">Calendar</a>, and <a href="https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html">DateFormat</a> classes - which you should <em>never</em> rely on completely for localized dates because they&rsquo;re junk. But this new <em>java.time</em> library is supposed to take care of all the problems developers had with the old ones. So&hellip; problem solved?</p>
<p>Maybe for Java devs, but this newer library only works with <em>API 26 or higher</em> on Android. Many projects still support older APIs, so these libraries simply aren&rsquo;t an option them. However, if you don&rsquo;t have to worry about that, give these a shot! I&rsquo;ll see if I can spend some time with these in the future and share my thoughts.</p>
<h2 id="simpledateformat---from-javatext">SimpleDateFormat - from java.text</h2>
<p>A <em>ton</em> of Android projects take advantage of <a href="https://developer.android.com/reference/java/text/SimpleDateFormat">SimpleDateFormat</a>, and why wouldn&rsquo;t you? Even the Android docs say this class is <code>for formatting and parsing dates in a locale-sensitive manner</code>. Sounds great, right? Well, I think it&rsquo;s a bit of a trap.</p>
<p>Java&rsquo;s SimpleDateFormat is a really attractive solution for anyone who previously tried the DateFormat class and found the formatting options to be really restrictive. DateFormat supports a limited number of <em>pre-determined</em> date-time arrangements, and plenty of desirable options are missing - like showing the month and date without the year. (The year is <em>always there</em>! Augh!! Hair pulling madness.) But with SimpleDateFormat, you can use a string value to explicitly build your own date format.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">val</span> myFormat = SimpleDateFormat(<span style="color:#e6db74">&#34;MMMM dd, yyyy&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">// no locale specified, uses Locale.getDefault()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">val</span> date = Date()
</span></span><span style="display:flex;"><span>println(myFormat.parse(date))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* sample output
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">en_US, USA -- December 07, 2008
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">fr_FR, France -- décembre 07, 2008
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span></code></pre></div><p>Super easy, right? Well, if you have keen eyes and you&rsquo;re familiar with the date format in France, you&rsquo;ve already noticed the sample output would be incorrect for that region. France puts the day number before the month!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wrong -&gt; décembre 07, 2008
</span></span><span style="display:flex;"><span>right -&gt; 07 décembre 2008
</span></span></code></pre></div><p><strong>And that&rsquo;s the trap.</strong> The main reason to use SimpleDateFormat is to create your own format, but when you create your own format, it&rsquo;s not really &rsquo;locale-sensitive&rsquo; after all! And that&rsquo;s a bit of a contradiction, I think.</p>
<p>In the end, your hard-coded string is the problem, and no matter what locale your app is running in, that format never changes to match. Now, there&rsquo;s a way around this - you can extract your format string into a <code>strings.xml</code> resource file and add a &rsquo;translated&rsquo; version of the format in the French resource.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- res/values-en/strings.xml --&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;date_format_1&#34;</span><span style="color:#f92672">&gt;</span>MMMM dd, yyyy<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- res/values-fr/strings.xml --&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;date_format_1&#34;</span><span style="color:#f92672">&gt;</span>dd MMMM yyyy<span style="color:#f92672">&lt;/string&gt;</span>
</span></span></code></pre></div><p>This works fine, and it might seem reasonable at first. But if your project needs 10 different date formats in 10 different languages&hellip; that&rsquo;s already 100 formatting strings you need to add to your resources and keep track of over time.</p>
<p>If you need that kind of specificity, give it a shot! But I don&rsquo;t think you do, and I&rsquo;m about to prove it. Let&rsquo;s take a look a look at DateUtils - the tool that does all this junk for you.</p>
<h2 id="dateutils">DateUtils</h2>
<p><a href="https://developer.android.com/reference/android/text/format/DateUtils">DateUtils</a> is the absolute <em>bomb</em> for date formatting on Android. It&rsquo;s flexible, robust, and aboslutely <em>is</em> sensitive to your customer&rsquo;s active locale. In fact, you&rsquo;re not even allowed to specify the locale being used when you format with DateUtils, and for the large majority of common date formatting needs, this is absolutely what you want. You want the system to handle most things for you, and DateUtils does this well.</p>
<p>The flexibility in using DateUtils comes from its bitmask formatting flags. They allow you to specify <em>exactly</em> which date or time components you want to appear in your formatted date value, but instead of showing up in the order you choose (like with the string from before), they act as simple on/off switches independent of order or locale. Here&rsquo;s an example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span>println(
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">DateUtils</span>.formatDateTime(
</span></span><span style="display:flex;"><span>    context,    <span style="color:#75715e">// needs a Context
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    myDate,     <span style="color:#75715e">// the Date object to format
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_DATE  <span style="color:#75715e">// the format flag for showind &#39;date&#39; (includes year)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  )
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">en_US -&gt; September 25, 2005
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">fr_FR -&gt; 25 septembre 2005
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">zh_CN -&gt; 2005年9月25日
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span></code></pre></div><p>Let&rsquo;s break this down a bit:</p>
<ul>
<li><code>DateUtils.formatDateTime</code> outputs a <code>String</code> value</li>
<li>First param is a <code>Context</code></li>
<li>Second param is the <code>Date</code> you want to format</li>
<li>Third param is the set of format flags you want to apply to the Date</li>
</ul>
<p>And that&rsquo;s it! No explicit format strings, no translated format resources, no locale problems! It <em>just works.</em></p>
<p>Let&rsquo;s see how you can use the bit flags to remove the year now.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_DATE or <span style="color:#a6e22e">DateUtils</span>.FORMAT_NO_YEAR
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* output:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">en_US -&gt; September 25
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">fr_FR -&gt; 25 septembre
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">zh_CN -&gt; 9月25日
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span></code></pre></div><p>The <code>or</code> bit operator takes both of the flags, combines them, and outputs a format with both flags enabled. This works with <em>any</em> number of formatting flags, including things like word abbreviations, numeric dates, showing weekdays, showing time, hiding the month, etc. Here are <a href="https://developer.android.com/reference/android/text/format/DateUtils#constants_1">all the available flags</a> for you.</p>
<p>DateUtils is truly the most flexible, easy-to-use, <em>built-in</em> date formatter I&rsquo;ve come across for Android projects. If you aren&rsquo;t using it yet, you should <em>really</em> think about switching to it today.</p>
<h2 id="dateutils-and-kotlin-extension-functions">DateUtils and Kotlin Extension Functions</h2>
<p>Want to supercharge your use of DateUtils? Use it in some Kotlin extension functions! Here are some fantastic samples from the Github project linked at the top of this post. These are ready for use in your project today!</p>
<p>Show only the time:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.asTime(context: Context): String =
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DateUtils</span>.formatDateTime(context, time, <span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_TIME)
</span></span></code></pre></div><p>Show date with year, numeric and abbreviation options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.asDateWithYear(
</span></span><span style="display:flex;"><span>    context: Context,
</span></span><span style="display:flex;"><span>    numeric: Boolean = <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    abbreviated: Boolean = <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>): String {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> formatFlags = <span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_DATE
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (numeric) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_NUMERIC_DATE
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (abbreviated) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_ABBREV_MONTH
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">DateUtils</span>.formatDateTime(context, time, formatFlags)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Dynamically show the time (if date is today) or the date (if date is not today):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.asTimeOrRecentDate(): String =
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">DateUtils</span>.formatSameDayTime(
</span></span><span style="display:flex;"><span>        time,
</span></span><span style="display:flex;"><span>        Date().time,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">DateFormat</span>.LONG,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">DateFormat</span>.SHORT
</span></span><span style="display:flex;"><span>    ).toString()
</span></span></code></pre></div><p>And something <em>super</em> flexible!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-kotlin" data-lang="kotlin"><span style="display:flex;"><span><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.flexFormatted(
</span></span><span style="display:flex;"><span>    context: Context,
</span></span><span style="display:flex;"><span>    showWeekday: Boolean = <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    showMonth: Boolean = <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    showMonthDay: Boolean = <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    showYear: Boolean = <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    showTime: Boolean = <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    numeric: Boolean = <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>    abbreviated: Boolean = <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>): String {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> formatFlags = <span style="color:#ae81ff">0</span> <span style="color:#75715e">// starts blank
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (showWeekday) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_WEEKDAY
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (showMonth) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_DATE
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (!showMonthDay) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_NO_MONTH_DAY
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (!showYear) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_NO_YEAR
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (showTime) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_SHOW_TIME
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (numeric) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_NUMERIC_DATE
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (abbreviated) formatFlags = formatFlags or <span style="color:#a6e22e">DateUtils</span>.FORMAT_ABBREV_MONTH or <span style="color:#a6e22e">DateUtils</span>.FORMAT_ABBREV_WEEKDAY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">DateUtils</span>.formatDateTime(context, time, formatFlags)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<p>Thanks for reading! I hope this little trip into the world of localization was as fun for you as it was for me. Please - ask questions, give opinions, and share your ideas in the comments! I&rsquo;d love to swap date formatting stories with you. Cheers!</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
