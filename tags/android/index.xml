<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>android on Adam Ormsby</title>
    <link>https://www.adamormsby.com/tags/android/</link>
    <description>Recent content in android on Adam Ormsby</description>
    <image>
      <url>https://www.adamormsby.com/site-img/rssIcon.png</url>
      <link>https://www.adamormsby.com/site-img/rssIcon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 28 Mar 2022 06:00:00 -0600</lastBuildDate><atom:link href="https://www.adamormsby.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Localization - Formatting Dates on Android</title>
      <link>https://www.adamormsby.com/posts/013-android-localization-formatting-dates/</link>
      <pubDate>Mon, 28 Mar 2022 06:00:00 -0600</pubDate>
      
      <guid>https://www.adamormsby.com/posts/013-android-localization-formatting-dates/</guid>
      <description>Hey everybody, let&amp;rsquo;s talk localization! Today, I want to look at date formatting for Android applications. When you want to display a date in your app, you have to keep in mind that your customers in different locales will expect dates to look the way they&amp;rsquo;re used to seeing them. But while there are a lot of date formatting options on Android, they aren&amp;rsquo;t all robust enough to &amp;lsquo;just work&amp;rsquo; the way you need them to. I&amp;rsquo;ll show you a how to get you exactly the format you want every time.</description>
      <content:encoded><![CDATA[<p>Hey everybody, let&rsquo;s talk localization! It&rsquo;s a passion of mine that I&rsquo;d like to spend more time on, and I want to share some tips and tricks I&rsquo;ve picked up in my work. Hopefully, this is only the first of many localization posts to come. Keep an eye out for more in the future!</p>




<form action=https://github.com/aormsby/android-l10n-samples target="_blank">
    <button class="button" style="margin: 16px 0px;" type="submit">View  &#39;Android Localization Samples&#39;  on Github</button>
</form>

<p>Today, I want to look at <em><strong>date formatting</strong></em> for Android applications. When you want to display a date in your app, you have to keep in mind that your customers in different locales will expect dates to look the way they&rsquo;re used to seeing them. But while there are a lot of date formatting options on Android, they aren&rsquo;t all robust enough to &lsquo;just work&rsquo; the way you need them to.</p>
<p>So first, let&rsquo;s take a look at two common solutions that aren&rsquo;t as great as they seem. Then I&rsquo;ll show you a how to get you exactly the format you want every time.</p>
<h2 id="localdate-localtime-localdatetime---from-javatime">LocalDate, LocalTime, LocalDateTime - from java.time</h2>
<p>These newer Java 8 time classes were built to take the place of the old, clunky <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Date.html">Date</a>, <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html">Calendar</a>, and <a href="https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html">DateFormat</a> classes - which you should <em>never</em> rely on completely for localized dates because they&rsquo;re junk. But this new <em>java.time</em> library is supposed to take care of all the problems developers had with the old ones. So&hellip; problem solved?</p>
<p>Maybe for Java devs, but this newer library only works with <em>API 26 or higher</em> on Android. Many projects still support older APIs, so these libraries simply aren&rsquo;t an option them. However, if you don&rsquo;t have to worry about that, give these a shot! I&rsquo;ll see if I can spend some time with these in the future and share my thoughts.</p>
<h2 id="simpledateformat---from-javatext">SimpleDateFormat - from java.text</h2>
<p>A <em>ton</em> of Android projects take advantage of <a href="https://developer.android.com/reference/java/text/SimpleDateFormat">SimpleDateFormat</a>, and why wouldn&rsquo;t you? Even the Android docs say this class is <code>for formatting and parsing dates in a locale-sensitive manner</code>. Sounds great, right? Well, I think it&rsquo;s a bit of a trap.</p>
<p>Java&rsquo;s SimpleDateFormat is a really attractive solution for anyone who previously tried the DateFormat class and found the formatting options to be really restrictive. DateFormat supports a limited number of <em>pre-determined</em> date-time arrangements, and plenty of desirable options are missing - like showing the month and date without the year. (The year is <em>always there</em>! Augh!! Hair pulling madness.) But with SimpleDateFormat, you can use a string value to explicitly build your own date format.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">val</span> myFormat = SimpleDateFormat(<span style="color:#e6db74">&#34;MMMM dd, yyyy&#34;</span>)
<span style="color:#75715e">// no locale specified, uses Locale.getDefault()
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">val</span> date = Date()
println(myFormat.parse(date))

<span style="color:#75715e">/* sample output
</span><span style="color:#75715e">en_US, USA -- December 07, 2008
</span><span style="color:#75715e">fr_FR, France -- décembre 07, 2008
</span><span style="color:#75715e">*/</span>
</code></pre></div><p>Super easy, right? Well, if you have keen eyes and you&rsquo;re familiar with the date format in France, you&rsquo;ve already noticed the sample output would be incorrect for that region. France puts the day number before the month!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">wrong -&gt; décembre 07, 2008
right -&gt; 07 décembre 2008
</code></pre></div><p><strong>And that&rsquo;s the trap.</strong> The main reason to use SimpleDateFormat is to create your own format, but when you create your own format, it&rsquo;s not really &lsquo;locale-sensitive&rsquo; after all! And that&rsquo;s a bit of a contradiction, I think.</p>
<p>In the end, your hard-coded string is the problem, and no matter what locale your app is running in, that format never changes to match. Now, there&rsquo;s a way around this - you can extract your format string into a <code>strings.xml</code> resource file and add a &lsquo;translated&rsquo; version of the format in the French resource.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;!-- res/values-en/strings.xml --&gt;</span>
<span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;date_format_1&#34;</span><span style="color:#f92672">&gt;</span>MMMM dd, yyyy<span style="color:#f92672">&lt;/string&gt;</span>

<span style="color:#75715e">&lt;!-- res/values-fr/strings.xml --&gt;</span>
<span style="color:#f92672">&lt;string</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;date_format_1&#34;</span><span style="color:#f92672">&gt;</span>dd MMMM yyyy<span style="color:#f92672">&lt;/string&gt;</span>
</code></pre></div><p>This works fine, and it might seem reasonable at first. But if your project needs 10 different date formats in 10 different languages&hellip; that&rsquo;s already 100 formatting strings you need to add to your resources and keep track of over time.</p>
<p>If you need that kind of specificity, give it a shot! But I don&rsquo;t think you do, and I&rsquo;m about to prove it. Let&rsquo;s take a look a look at DateUtils - the tool that does all this junk for you.</p>
<h2 id="dateutils">DateUtils</h2>
<p><a href="https://developer.android.com/reference/android/text/format/DateUtils">DateUtils</a> is the absolute <em>bomb</em> for date formatting on Android. It&rsquo;s flexible, robust, and aboslutely <em>is</em> sensitive to your customer&rsquo;s active locale. In fact, you&rsquo;re not even allowed to specify the locale being used when you format with DateUtils, and for the large majority of common date formatting needs, this is absolutely what you want. You want the system to handle most things for you, and DateUtils does this well.</p>
<p>The flexibility in using DateUtils comes from its bitmask formatting flags. They allow you to specify <em>exactly</em> which date or time components you want to appear in your formatted date value, but instead of showing up in the order you choose (like with the string from before), they act as simple on/off switches independent of order or locale. Here&rsquo;s an example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin">println(
  DateUtils.formatDateTime(
    context,    <span style="color:#75715e">// needs a Context
</span><span style="color:#75715e"></span>    myDate,     <span style="color:#75715e">// the Date object to format
</span><span style="color:#75715e"></span>    DateUtils.FORMAT_SHOW_DATE  <span style="color:#75715e">// the format flag for showind &#39;date&#39; (includes year)
</span><span style="color:#75715e"></span>  )
}

<span style="color:#75715e">/* output:
</span><span style="color:#75715e">en_US -&gt; September 25, 2005
</span><span style="color:#75715e">fr_FR -&gt; 25 septembre 2005
</span><span style="color:#75715e">zh_CN -&gt; 2005年9月25日
</span><span style="color:#75715e">*/</span>
</code></pre></div><p>Let&rsquo;s break this down a bit:</p>
<ul>
<li><code>DateUtils.formatDateTime</code> outputs a <code>String</code> value</li>
<li>First param is a <code>Context</code></li>
<li>Second param is the <code>Date</code> you want to format</li>
<li>Third param is the set of format flags you want to apply to the Date</li>
</ul>
<p>And that&rsquo;s it! No explicit format strings, no translated format resources, no locale problems! It <em>just works.</em></p>
<p>Let&rsquo;s see how you can use the bit flags to remove the year now.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin">DateUtils.FORMAT_SHOW_DATE or DateUtils.FORMAT_NO_YEAR

<span style="color:#75715e">/* output:
</span><span style="color:#75715e">en_US -&gt; September 25
</span><span style="color:#75715e">fr_FR -&gt; 25 septembre
</span><span style="color:#75715e">zh_CN -&gt; 9月25日
</span><span style="color:#75715e">*/</span>
</code></pre></div><p>The <code>or</code> bit operator takes both of the flags, combines them, and outputs a format with both flags enabled. This works with <em>any</em> number of formatting flags, including things like word abbreviations, numeric dates, showing weekdays, showing time, hiding the month, etc. Here are <a href="https://developer.android.com/reference/android/text/format/DateUtils#constants_1">all the available flags</a> for you.</p>
<p>DateUtils is truly the most flexible, easy-to-use, <em>built-in</em> date formatter I&rsquo;ve come across for Android projects. If you aren&rsquo;t using it yet, you should <em>really</em> think about switching to it today.</p>
<h2 id="dateutils-and-kotlin-extension-functions">DateUtils and Kotlin Extension Functions</h2>
<p>Want to supercharge your use of DateUtils? Use it in some Kotlin extension functions! Here are some fantastic samples from the Github project linked at the top of this post. These are ready for use in your project today!</p>
<p>Show only the time:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.asTime(context: Context): String =
    DateUtils.formatDateTime(context, time, DateUtils.FORMAT_SHOW_TIME)
</code></pre></div><p>Show date with year, numeric and abbreviation options:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.asDateWithYear(
    context: Context,
    numeric: Boolean = <span style="color:#66d9ef">false</span>,
    abbreviated: Boolean = <span style="color:#66d9ef">false</span>
): String {
    <span style="color:#66d9ef">var</span> formatFlags = DateUtils.FORMAT_SHOW_DATE
    <span style="color:#66d9ef">if</span> (numeric) formatFlags = formatFlags or DateUtils.FORMAT_NUMERIC_DATE
    <span style="color:#66d9ef">if</span> (abbreviated) formatFlags = formatFlags or DateUtils.FORMAT_ABBREV_MONTH

    <span style="color:#66d9ef">return</span> DateUtils.formatDateTime(context, time, formatFlags)
}
</code></pre></div><p>Dynamically show the time (if date is today) or the date (if date is not today):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.asTimeOrRecentDate(): String =
    DateUtils.formatSameDayTime(
        time,
        Date().time,
        DateFormat.LONG,
        DateFormat.SHORT
    ).toString()
</code></pre></div><p>And something <em>super</em> flexible!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">Date</span>.flexFormatted(
    context: Context,
    showWeekday: Boolean = <span style="color:#66d9ef">false</span>,
    showMonth: Boolean = <span style="color:#66d9ef">true</span>,
    showMonthDay: Boolean = <span style="color:#66d9ef">true</span>,
    showYear: Boolean = <span style="color:#66d9ef">false</span>,
    showTime: Boolean = <span style="color:#66d9ef">false</span>,
    numeric: Boolean = <span style="color:#66d9ef">false</span>,
    abbreviated: Boolean = <span style="color:#66d9ef">false</span>,
): String {
    <span style="color:#66d9ef">var</span> formatFlags = <span style="color:#ae81ff">0</span> <span style="color:#75715e">// starts blank
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (showWeekday) formatFlags = formatFlags or DateUtils.FORMAT_SHOW_WEEKDAY
    <span style="color:#66d9ef">if</span> (showMonth) formatFlags = formatFlags or DateUtils.FORMAT_SHOW_DATE
    <span style="color:#66d9ef">if</span> (!showMonthDay) formatFlags = formatFlags or DateUtils.FORMAT_NO_MONTH_DAY
    <span style="color:#66d9ef">if</span> (!showYear) formatFlags = formatFlags or DateUtils.FORMAT_NO_YEAR
    <span style="color:#66d9ef">if</span> (showTime) formatFlags = formatFlags or DateUtils.FORMAT_SHOW_TIME
    <span style="color:#66d9ef">if</span> (numeric) formatFlags = formatFlags or DateUtils.FORMAT_NUMERIC_DATE
    <span style="color:#66d9ef">if</span> (abbreviated) formatFlags = formatFlags or DateUtils.FORMAT_ABBREV_MONTH or DateUtils.FORMAT_ABBREV_WEEKDAY

    <span style="color:#66d9ef">return</span> DateUtils.formatDateTime(context, time, formatFlags)
}
</code></pre></div><hr>
<p>Thanks for reading! I hope this little trip into the world of localization was as fun for you as it was for me. Please - ask questions, give opinions, and share your ideas in the comments! I&rsquo;d love to swap date formatting stories with you. Cheers!</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
