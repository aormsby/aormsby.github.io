<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Github on </title>
    <link>https://www.adamormsby.com/tags/github/</link>
    <description>Recent content in Github on </description>
    <image>
      <title></title>
      <url>https://www.adamormsby.com/site-img/rssIcon.png</url>
      <link>https://www.adamormsby.com/site-img/rssIcon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Nov 2021 06:00:00 -0600</lastBuildDate>
    <atom:link href="https://www.adamormsby.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github Actions - Updated!</title>
      <link>https://www.adamormsby.com/posts/008-fork-and-deploy-updates/</link>
      <pubDate>Mon, 08 Nov 2021 06:00:00 -0600</pubDate>
      <guid>https://www.adamormsby.com/posts/008-fork-and-deploy-updates/</guid>
      <description>I&amp;rsquo;ve made some serious updates to my two Github Actions available on the Marketplace, and I want to share with you what changes were made and why I decided to make them.</description>
      <content:encoded><![CDATA[<p>Wow, what a year! I mean, 2021 still hasn&rsquo;t been my favorite, but it&rsquo;s been a hell of a lot better than last year. Much more productive, anyway. I&rsquo;ve made some serious updates to my two Github Actions available on the Marketplace, and I want to share with you what changes were made and why I decided to make them.</p>
<p>So without further ado, let&rsquo;s jump straight into the more popular of the two!</p>
<h2 id="upstream-sync">Upstream Sync</h2>




<form action=https://github.com/aormsby/Fork-Sync-With-Upstream-action target="_blank">
    <button class="button" style="margin: 18px 0px; padding: 12px; display: flex; align-items: center; justify-content: flex-start;" type="submit">
        <img src="/octocat-filled.svg" alt="Github logo" width="32px" style="margin: 0px 12px 0px 0px;" />
        <p style="margin: 0;">View   on Github</p>
    </button>
</form>

<p>The changes I made to this action really kicked off a whole new approach to how I write shell-based tools. The first few versions had all the code together in a single script, but as the project grew I found it was getting harder to keep track of the state of certain things. To deal with this, I split each piece of the action into its own small script and now call each step from a master script.</p>
<p>It might seem like overkill for a little action like this, but there are real benefits to this kind of architectural change. More flexibility, better testability, and better readability are just the start. It even exposed for me the fact that syncing from private repos <em>wasn&rsquo;t ever working correctly!</em> So that&rsquo;s been fixed. For good.</p>
<h3 id="test-mode">Test Mode</h3>
<p>Since I split all the scripts, they&rsquo;re now more testable! And you get to test them yourself with the new local <code>test_mode</code>. I <em>love</em> this feature. After configuring your workflow, you want to be sure it&rsquo;ll work, right? Well, if you run your workflow with the test mode enabled, it will run a bunch of unit tests to determine if your configuration makes sense <em>before</em> you ever run your first sync. The action output will show you which tests are running as well as a success or failure status.</p>
<figure class="align-center "><a href="img/sync-tests.png">
    <img loading="lazy" src="img/sync-tests.png#center"
         alt="Upstream Sync test mode"/> </a>
</figure>

<p>While these tests don&rsquo;t cover every possible issue, they do cover the basics. Does your upstream repo exist? Do your branches exist? Things like that. If you think more tests are needed, let me know!</p>
<h3 id="flexible-domain">Flexible Domain</h3>
<p>You can now change the domain from <code>github.com</code> to any other base domain if your sync repo is not on Github. Maybe this will broaden the action&rsquo;s user base? We&rsquo;ll see! Thank you to <a href="https://github.com/mathieucarbou">@mathieucarbou</a> for adding this feature.</p>
<h3 id="fixes">Fixes</h3>
<p>Of course there were some fixes! Nothing&rsquo;s perfect. I mentioned before that syncing from private repos was never actually working as intended, and it turned out that I was having issues setting credentials when trying to access them. So that&rsquo;s fixed! Along with that, there was a request for a GPG signing feature, which actually pushed me to discover and fix another problem &ndash; the git configuration being done by the Upstream Sync action was clashing with other actions run in the same workflow. Also fixed. Did I add GPG signing? No. But this makes it so that you can confidently <a href="https://github.com/aormsby/Fork-Sync-With-Upstream-action/wiki/GPG-Signing">add other actions</a> into your workflow to support such needs.</p>
<h3 id="wiki">Wiki</h3>
<p>Documentation is a good thing, so I wrote a wiki. I felt there were enough &rsquo;non-standard&rsquo; sync scenarios cropping up that I needed write some help docs, and here they are &ndash; <a href="https://github.com/aormsby/Fork-Sync-With-Upstream-action/wiki">https://github.com/aormsby/Fork-Sync-With-Upstream-action/wiki</a>. They aren&rsquo;t super long, and it&rsquo;s worth reading them to get familiar with the changes as well as how to set up for your specific use case if the action doesn&rsquo;t work for you out of the box.</p>
<h3 id="v24">v2.4</h3>
<p>For those of you seeking minimal changes to the actions you use, I released v2.4 as a fix for the private repo issues you may have encountered previously. It also includes the <code>domain</code> input variable. While this should be good enough to get you the fixes you need, please know that I will not make any further updates to v2.</p>
<h2 id="hugo-build-and-deploy">Hugo Build and Deploy</h2>




<form action=https://github.com/aormsby/hugo-deploy-to-pages target="_blank">
    <button class="button" style="margin: 18px 0px; padding: 12px; display: flex; align-items: center; justify-content: flex-start;" type="submit">
        <img src="/octocat-filled.svg" alt="Github logo" width="32px" style="margin: 0px 12px 0px 0px;" />
        <p style="margin: 0;">View   on Github</p>
    </button>
</form>

<p>On to the second action! Hugo Build and Deploy hasn&rsquo;t had such a great showing in the past as its functionality was a bit flaky - but that&rsquo;s going to change! If you&rsquo;re seeing this post now, it means the action did its job building and publishing my site&rsquo;s updates. Inspired by my changes to Upstream Sync, I also split all of the action steps into their own scripts. It really allowed me to figure out what was going wrong with this action as well as update it to follow a more modern continuous delivery pattern when publishing. While I really don&rsquo;t expect the action to need many updates, I don&rsquo;t expect it to cause trouble anymore, either.</p>
<h3 id="test-mode-again">Test Mode (Again)</h3>
<p>Much like the other action, there&rsquo;s a new test mode. Specifically, this action test if your branches and repos exists, but it also <em>crucially</em> helps you determine if you&rsquo;ve set things up correctly for any sumbodules you might be publishing to. Personally, I&rsquo;m moving away from submodule publishing for Hugo websites, and I plan on sharing why in a future post. But I know I lot of you might not be, and I wanted to make sure this action supports your needs clearly and safely.</p>
<figure class="align-center "><a href="img/deploy-tests.png">
    <img loading="lazy" src="img/deploy-tests.png#center"
         alt="Hugo Build and Deploy test mode"/> </a>
</figure>

<h3 id="branched-builds">Branched Builds</h3>
<p>Along with changes to the project, I&rsquo;ve also made big changes to the action output. Previously, the action made site builds and pushed the changes to the same branch it got the source code from. That&rsquo;s a problem because on some level that branch is pretty likely to be an active development branch. For many reasons, modern CD patterns dictate that development and release should remain separate. The updated deploy action fully supports that kind of separation.</p>
<p>Now when you configure the action, you choose your <code>source-branch</code> to <em>pull from</em>, and your <code>release_branch</code> to <em>build to</em>. The biggest benefit of this change is that you&rsquo;ll now have a totally separate branch just for tracking your release history, and you won&rsquo;t have any auto-build commit pollution in your working branches. Good stuff.</p>
<h3 id="wiki-again">Wiki (Again)</h3>
<p>See the pattern here? Good releases have documentation. <a href="https://github.com/aormsby/hugo-deploy-to-pages/wiki">https://github.com/aormsby/hugo-deploy-to-pages/wiki</a></p>
<h3 id="known-issue---shallow-clones">Known Issue - Shallow Clones</h3>
<p>Trying to get proper merges when using shallow clones during checkout has quite a problem. Thankfully, it doesn&rsquo;t prevent the action from working, but it does mean you have checkout with fetch-depth: &lsquo;0&rsquo; and pull the entire commit history when that may not be desirable behavior. See <a href="https://github.com/aormsby/hugo-deploy-to-pages/wiki/Git-Shallow-Clone-Challenge">Git Shallow Clone Challenge</a> for details, and maybe you can help.</p>
<h2 id="reach-out">Reach Out</h2>
<p>I&rsquo;m super thrilled to have some regular users of both of these actions, and I do my best to check in on their health every so often. If you have any questions, issues, or suggestions, I invite you to reach out by commenting here or opening an issue directly on these repositories.</p>
<p>In the meantime, what have you been up to? Tell me about it in the comments! Share a link, and I&rsquo;ll read all about it. &#x1f642;</p>
]]></content:encoded>
    </item>
    <item>
      <title>Github Action: Fork Sync With Upstream</title>
      <link>https://www.adamormsby.com/posts/000/fork-sync-with-upstream/</link>
      <pubDate>Fri, 14 Aug 2020 20:00:00 -0500</pubDate>
      <guid>https://www.adamormsby.com/posts/000/fork-sync-with-upstream/</guid>
      <description>These days, automation is key to saving time and minimizing errors. But if you&amp;rsquo;ve never worked with automation, it&amp;rsquo;s good to start small. This was exactly my thought when I made my first Github Action. Let&amp;rsquo;s see what it does!</description>
      <content:encoded><![CDATA[



<form action=https://github.com/aormsby/Fork-Sync-With-Upstream-action target="_blank">
    <button class="button" style="margin: 18px 0px; padding: 12px; display: flex; align-items: center; justify-content: flex-start;" type="submit">
        <img src="/octocat-filled.svg" alt="Github logo" width="32px" style="margin: 0px 12px 0px 0px;" />
        <p style="margin: 0;">View   on Github</p>
    </button>
</form>

<p>These days, automation is key to saving time and minimizing errors. But if you&rsquo;ve never worked with automation, it&rsquo;s good to start small. This was exactly my thought when I made my first Github Action. It&rsquo;s available now on the Github Marketplace if you want to try it out - <a href="https://github.com/marketplace/actions/upstream-sync">Fork Sync With Upstream</a>. Let&rsquo;s see what it does!</p>
<h2 id="how-it-works">How It Works</h2>
<p>Remember my post on <a href="https://www.adamormsby.com/posts/000/hugo-themes-making-modifications/">making modifications to a Hugo theme</a>? We forked a theme repository and saw how to make custom modifications to our local version of it. Whenever we wanted to pull updates from the source repo, we ran a bunch of git commands to pull new commits from the upstream repo and then push them to our fork. Syncing with commands like that is all well and good, but let&rsquo;s save ourselves a little time by automating that process.</p>
<p>The Fork Sync With Upstream action takes care of all those updates for us without any work on our part. At its core, the action is a shell script that runs on a Github server and automatically does the following:</p>
<ul>
<li>Checkout your fork (needed for the sync process)</li>
<li>Set the upstream repo to pull updates from</li>
<li>Check if there are any new commits to sync (and print the commit information)</li>
<li>Pull from the upstream repo</li>
<li>Push to the target branch of the target repo</li>
</ul>
<p>Just add my action to a Github workflow file in your repo, and <em>voila!</em> All that update work you were doing manually is now automated!</p>
<h2 id="running-the-fork-sync">Running the Fork Sync</h2>
<p>If you&rsquo;ve never made a Github workflow before, it&rsquo;s a little bit confusing to figure out at first. (At least, it all was for me.) I recommend reading some of the <a href="https://docs.github.com/en/actions">Github Actions documentation</a> to get a better feel for how all the pieces work together.</p>
<p>For those looking for a quick sample workflow, here&rsquo;s the one I&rsquo;m using in <a href="https://github.com/aormsby/F-hugo-theme-hello-friend">my fork of Hello Friend</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>:  <span style="color:#e6db74">&#39;0 7 * * 1,4&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># scheduled at 07:00 every Monday and Thursday</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">sync_with_upstream</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Sync master with upstream latest</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout master</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Pull upstream changes</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">id</span>: <span style="color:#ae81ff">sync</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">aormsby/Fork-Sync-With-Upstream-action@v1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">upstream_repository</span>: <span style="color:#ae81ff">panr/hugo-theme-hello-friend</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">upstream_branch</span>: <span style="color:#ae81ff">master</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Timestamp</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">run</span>: <span style="color:#ae81ff">date</span>
</span></span></code></pre></div><p>This may not be the only Action built for syncing with a remote, but it certainly has a better README than many of the other ones I&rsquo;ve seen! For more details on using input variables and options, visit the official Marketplace page for <a href="https://github.com/marketplace/actions/upstream-sync">Fork Sync With Upstream</a>.</p>
<h2 id="behind-the-scenes">Behind The Scenes</h2>
<p>Just some extra dev notes if you&rsquo;re interested. &#x1f642;</p>
<p>Github Actions currently have to be created as Docker container actions or JavaScript actions. I went with JavaScript because it&rsquo;s more familiar to me, and I don&rsquo;t need to run this action in any specific Docker-simulated environment.</p>
<p>The <code>action.yaml</code> file declares all the input variables needed for the action and then runs <code>main.js</code>. At the moment, <code>main.js</code> exists only to run the shell script <code>upstream-sync.sh</code>, which is where the sync really happens. This could change in the future.</p>
<p>I used both <code>@actions/core</code> and <code>@actions/exec</code> from the <a href="https://github.com/actions/toolkit">Github Actions Toolkit</a> to simplify the functionality in <code>main.js</code>. The shell script is called by <code>exec</code>, which I think of as an &rsquo;easy&rsquo; version of the <code>exec</code> function in node.js. Some of the actions and tools that Github has made are really quite useful.</p>
<p>Anyway, try it out! Let me know how you like it. I&rsquo;m also planning on turning my <a href="https://www.adamormsby.com/posts/000/hugo-shell-deploy-script/">shell deploy script</a> into an action, so be on the lookout for that. And if you like my work, please consider buying me a coffee. Cheers!</p>
]]></content:encoded>
    </item>
    <item>
      <title>How to Set Up a Hugo Site on Github Pages - with Git Submodules!</title>
      <link>https://www.adamormsby.com/posts/000/how-to-set-up-a-hugo-site-on-github-pages-with-submodules/</link>
      <pubDate>Tue, 17 Mar 2020 22:30:00 +0700</pubDate>
      <guid>https://www.adamormsby.com/posts/000/how-to-set-up-a-hugo-site-on-github-pages-with-submodules/</guid>
      <description>This blog was made with Hugo, hosted on Github Pages, and harnesses the power of git submodules to separate source code from live site data. This tutorial shows you how I got all these systems to work together nicely and how you can use these tools to take more control of your site.</description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>I made this blog site using the <a href="https://www.gohugo.io">Hugo static site generator</a> because I wanted to build a simple site where I could have full control over every detail - <em>not</em> like using Wordpress, Squarespace, or Wix. With Hugo, I can add and remove templates and functionality at will, and it feels <em>great</em> to have that kind of power. You probably ended up here because you want that, too.</p>
<p>In this post, we&rsquo;ll take a look at how to:</p>
<ul>
<li>Create a new Hugo site</li>
<li>Host it on Github Pages</li>
<li>Use git submodules to separate our site&rsquo;s key directories into manageable chunks</li>
</ul>
<p>We&rsquo;ll also go over the benefits (and drawbacks) of using submodules in our setup, and by the end of this post, we&rsquo;ll have a new Hugo project hosted on Github Pages and ready for action.</p>
<p><em>Please note:<br>
I&rsquo;ll talk a little about branching inside our submodules later on. To keep things simple, you can assume that I&rsquo;ve stayed on the main &lsquo;master&rsquo; branch of each git module. Also, I work on a Mac so all of my commands are Mac-specific.</em></p>
<h3 id="why-git-submodules">Why Git Submodules?</h3>
<p>Every git project is stored as a versioned code repository (a repo). Git submodules allow us to reference other repos within a project, which effectively puts a project inside a project (or a repo inside a repo). The submodule&rsquo;s code can then be used by the main project, but the submodule <em><strong>maintains its own commit and branch history,</strong></em> which separates the projects and can be a pretty powerful thing.</p>
<figure class="align-center "><a href="img/explain-submodules.jpg">
    <img loading="lazy" src="img/explain-submodules.jpg#center"
         alt="diagram showing how code is included using submodules with a git project"/> </a>
</figure>

<p>In a Hugo project, most of what we see is source data - the raw files we manipulate before building our site. After Hugo builds our site, our &lsquo;ready-to-publish&rsquo; data gets output to the <code>public</code> directory of our project. By turning the <code>public</code> folder into a submodule of the main project, we can treat it as a separate entity with a separate history. Let&rsquo;s see what that process looks like.</p>
<h2 id="install-hugo-and-create-a-project">Install Hugo and Create a Project</h2>
<p>First things first, we need to install Hugo! We&rsquo;ll run through the key Mac commands quickly here, but if you need any more help you can always check <a href="https://gohugo.io/getting-started/quick-start/">Hugo&rsquo;s &lsquo;Quick Start&rsquo; guide</a> for more details or information about installing on Windows and Linux.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 1. Open a terminal. Alternatively, you can VSCode&#39;s terminal - it&#39;s great!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2. If you don&#39;t have brew installed --</span>
</span></span><span style="display:flex;"><span>&gt; /bin/bash -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3. Install Hugo</span>
</span></span><span style="display:flex;"><span>&gt; brew install hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 4. Move to the directory where you want to create the project.</span>
</span></span><span style="display:flex;"><span>&gt; cd <span style="color:#f92672">[</span>MY/DIRECTORY/NAME<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 5. Create a new Hugo project. I&#39;ll use &#34;hugo-gh&#34; as my sample name.</span>
</span></span><span style="display:flex;"><span>&gt; hugo new site <span style="color:#f92672">[</span>SITE_NAME<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>So far, we&rsquo;ve installed Hugo on our machine and created a new template project named <strong>hugo-gh</strong>. If you&rsquo;re following Hugo&rsquo;s Quick Start guide, you may be tempted to move straight on to adding a theme, running the local server, and seeing your site. We&rsquo;ll <em>absolutely</em> get to all that, but since our goal here is to use git submodules to manage the different parts of our project, it would benefit us to go through some setup steps on Github first.</p>
<h2 id="push-project-files-to-github">Push Project Files to Github</h2>
<p>Let&rsquo;s get our project versioned with Github right away! We&rsquo;ll need to create two repositories on Github - one to host our source code and one to host our live site data.</p>
<h3 id="source-code-repository">Source Code Repository</h3>
<p>Sign in to Github and create a new repository. I&rsquo;ll call mine <strong>hugo-gh-pages-source</strong>.</p>
<figure class="align-center "><a href="img/github-new-repo.jpg">
    <img loading="lazy" src="img/github-new-repo.jpg#center"
         alt="create a new github repo"/> </a>
</figure>

<figure class="align-center "><a href="img/github-repo-name.jpg">
    <img loading="lazy" src="img/github-repo-name.jpg#center"
         alt="name the new github repo"/> </a>
</figure>

<p><em><strong>Hot tip:</strong> If we create a repo <em>without</em> a README file it&rsquo;s easier to avoid accidental history conflicts when pushing a local project to a fresh repo. We can always add one later.</em></p>
<p>When our new empty repo is ready, go back to the terminal window and input these commands to initialize our local repo and push to Github.</p>
<p><em>(If you already have a <code>public</code> folder in your project, delete it before doing any of this to save some headaches.)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 1. Enter the project folder.</span>
</span></span><span style="display:flex;"><span>&gt; cd hugo-gh
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2. Initialize git locally.</span>
</span></span><span style="display:flex;"><span>&gt; git init
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3. Set our new Github repo as the remote for our local project</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># (my sample URL - https://github.com/aormsby/hugo-gh-pages-source.git)</span>
</span></span><span style="display:flex;"><span>&gt; git remote add origin https://github.com/<span style="color:#f92672">[</span>GITHUB_USERNAME<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>SOURCE_REPO_NAME<span style="color:#f92672">]</span>.git
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 4. Stage all files for commit.</span>
</span></span><span style="display:flex;"><span>&gt; git add .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 5. Commit files.</span>
</span></span><span style="display:flex;"><span>&gt; git commit -m <span style="color:#e6db74">&#34;committing our hugo template&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 6. Push to the remote master</span>
</span></span><span style="display:flex;"><span>&gt; git push -u origin master
</span></span></code></pre></div><p>And there you have it! Our project source is now pushed to our Github repo.</p>
<figure class="align-center "><a href="img/source-pushed.jpg">
    <img loading="lazy" src="img/source-pushed.jpg#center"
         alt="source project pushed to Github"/> </a>
</figure>

<p>You could <em>absolutely</em> set up your source repo to be the host of your site using Github Pages, and you may have good reasons for doing so. That would require a different setup that you can find steps for on Hugo&rsquo;s <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#deployment-of-project-pages-from-docs-folder-on-master-branch">Host on Github</a> docs page. However, if we do this we ignore our chance to separate <code>public</code> into a separately versioned repo. To accomplish this, we have to create a second repository.</p>
<h3 id="live-site-data-repository">Live Site Data Repository</h3>
<p>Let&rsquo;s add our first submodule to the project! Remember, our goal is to separate the commit histories of our project source and our site build output to the <code>public</code> directory. First, we create another repo on Github for our public site data. I&rsquo;ll call mine <strong>hugo-gh-pages-public</strong>. In our local terminal, run the following command from the project root.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># my sample URL - https://github.com/aormsby/hugo-gh-pages-public.git</span>
</span></span><span style="display:flex;"><span>&gt; git submodule add https://github.com/<span style="color:#f92672">[</span>GITHUB_USERNAME<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>PUBLIC_REPO_NAME<span style="color:#f92672">]</span>.git public
</span></span></code></pre></div><p>Sweet! We now have a submodule initialized and loaded into our project under the <code>public</code> directory, and it&rsquo;s already connected to its remote origin. Let&rsquo;s do a quick site build just to put something into the remote Github repo. The commands needed are a little tedious, but it&rsquo;s good to know the process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># 1. Perform a site build and output to &#39;public/&#39; directory.</span>
</span></span><span style="display:flex;"><span>&gt; hugo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2-4.</span>
</span></span><span style="display:flex;"><span>&gt; cd public
</span></span><span style="display:flex;"><span>&gt; git add .
</span></span><span style="display:flex;"><span>&gt; git commit -m <span style="color:#e6db74">&#34;first build&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 5. Return to the project root.</span>
</span></span><span style="display:flex;"><span>&gt; cd ../
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 6-7.</span>
</span></span><span style="display:flex;"><span>&gt; git add .
</span></span><span style="display:flex;"><span>&gt; git commit -m <span style="color:#e6db74">&#34;first build - update submodule reference&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 8. Push the source project *and* the public submodule to Github together.</span>
</span></span><span style="display:flex;"><span>&gt; git push -u origin master --recurse-submodules<span style="color:#f92672">=</span>on-demand
</span></span></code></pre></div><p>It&rsquo;s <em><strong>super important</strong></em> when we build to make sure that we commit and push <em>both</em> the public submodule and the main project. For each submodule commit, the project updates its reference to the submodule to maintain its connection to the correct commit. The <code>--recurse-submodules=on-demand</code> command pushes all of the project modules at the same time.</p>
<figure class="align-center "><a href="img/submodule-reference-terminal.jpg">
    <img loading="lazy" src="img/submodule-reference-terminal.jpg#center"
         alt="submodule reference in terminal using git status command"/> </a><figcaption>
            <p>submodule reference updated in the terminal after <code>git status</code> command</p>
        </figcaption>
</figure>

<figure class="align-center "><a href="img/submodule-reference-github.jpg">
    <img loading="lazy" src="img/submodule-reference-github.jpg#center"
         alt="submodule reference on github after pushing"/> </a><figcaption>
            <p>submodule reference on github after pushing</p>
        </figcaption>
</figure>

<h2 id="enable-github-pages">Enable Github Pages</h2>
<p>On Github, our <strong>hugo-gh-pages-public</strong> repo now has some data. Go to the repo settings and find the Github Pages section. Set the <strong>Source</strong> of our site to <strong>master branch</strong>.</p>
<figure class="align-center "><a href="img/github-pages-settings.jpg">
    <img loading="lazy" src="img/github-pages-settings.jpg#center"
         alt="menu to update Github Pages settings to use master branch"/> </a>
</figure>

<p>With these settings, Github Pages will be able to serve our site from the repo starting with the <strong>index.html</strong> file in its root directory. The live URL for the site is built from your user name and the project name. Here&rsquo;s my sample URL - <a href="https://aormsby.github.io/hugo-gh-pages-public"><code>https://aormsby.github.io/hugo-gh-pages-public</code></a>. At this point, our site won&rsquo;t display anything except an error message since Hugo requires some page templates or a full theme to generate the pages. That&rsquo;s fine. We just wanted to add some stuff to Github so we could access the repo&rsquo;s Github Pages settings as we just did.</p>
<h2 id="benefits-of-making-a-submodule-in-public">Benefits of Making a Submodule in &lsquo;Public&rsquo;</h2>
<p>To recap, here&rsquo;s our project setup so far.</p>
<figure class="align-center "><a href="img/submodules-diagram-with-public.jpg">
    <img loading="lazy" src="img/submodules-diagram-with-public.jpg#center"
         alt="project submodule digram with public folder"/> </a>
</figure>

<p>Let&rsquo;s take a look at some of the benefits of this system.</p>
<ul>
<li>
<p><strong>No accidental deploys</strong> - With our source code separated from our site data, it&rsquo;s a lot harder to accidentally push unfinished work to our live site. Even if we make builds locally and push our source changes, we won&rsquo;t push to our <strong>hugo-gh-pages-public</strong> repo without explicitly running commands to make that happen. <em>*sigh of relief*</em></p>
</li>
<li>
<p><strong>Separate rollbacks</strong> - If something goes wrong, the main project and public project can be separately rolled back to earlier commits. <em>(Just remember to commit the modified reference updates to the main module!)</em></p>
</li>
<li>
<p><strong>Branch work is easier</strong> - Changing branches in our source project will not change branches in our subproject (and vice versa). This is another nice safety buffer, and it gives us more options for branching in either module.</p>
</li>
<li>
<p><strong>Ready for site staging</strong> - We can easily create development branches in the <strong>public</strong> submodule that could be served as development subdomains of our site and used for testing new features.</p>
</li>
</ul>
<h3 id="some-drawbacks">Some Drawbacks</h3>
<p>Of course, it&rsquo;s always wise to assess the risks of any setup, and there are many opinions on the &lsquo;perfect system&rsquo; in the dev world - <strong>tell me about yours in the comments!</strong> To shine some light on the potential downsides of our submodule use, here are some of the concerns I&rsquo;ve thought about.</p>
<ul>
<li>
<p><strong>Juggling multiple repos</strong> - With more submodules comes more administration. It doesn&rsquo;t seem so rough for me, but right now I&rsquo;m working on my own. Running interlinked, asynchronous repositories comes with its own challenges in a team setting, particularly if someone forgets to push updated submodule references to the source.</p>
</li>
<li>
<p><strong>No site staging with Github Pages</strong> - While the <strong>public</strong> submodule can branch and easily store data used in a site staging system, Github Pages does not seem to support subdomains from different project branches. That&rsquo;s more of a Github Pages drawback, but it means we can&rsquo;t take full advantage of our setup just yet. Another hosting platform might offer a solution - I&rsquo;ll be looking into some options in a future post.</p>
</li>
</ul>
<h2 id="add-a-theme-to-our-site">Add a Theme to Our Site</h2>
<p>Wait, we&rsquo;re not finished just yet! Remember how our site doesn&rsquo;t display anything except an error message right now? We need some templates to get things up and running. The easiest way to get some is to add one of the many <a href="https://themes.gohugo.io/">Hugo themes</a> to our project. Since it was the first theme I used, I&rsquo;ll use the <a href="https://themes.gohugo.io/hugo-theme-hello-friend/">Hello Friend theme</a> in my example.</p>
<blockquote>
<p>Author&rsquo;s Note: If you need submodules, keep on reading! But you might consider using Hugo modules instead. I have another post on those. See what works best for you! (<a href="https://www.adamormsby.com/posts/012-hugo-modules/">my post</a>)</p>
</blockquote>
<p>Many guides for adding a theme - including Hugo&rsquo;s own docs - just tell you to clone the theme repo or download and copy it into your project&rsquo;s <code>themes</code> directory. But hey, <em>our</em> theme today is <em>submodules</em>, so I propose that we add a theme to our project as a <em>submodule</em> since doing so would give us some nice dev powers over the theme.</p>
<figure class="align-center "><a href="img/submodules-diagram-with-theme.jpg">
    <img loading="lazy" src="img/submodules-diagram-with-theme.jpg#center"
         alt="project submodule digram with theme folder"/> </a>
</figure>

<p>Look at it this way - directly cloning a theme into our project has two major problems.</p>
<ol>
<li><strong>We can&rsquo;t push our commits to the theme&rsquo;s source repo, because we don&rsquo;t have permission.</strong> This means we can&rsquo;t make changes to the theme and then keep them versioned.</li>
<li><strong>A cloned project in a subdirectory isn&rsquo;t linked with the main project.</strong> When a submodule is added to a project, the main project adds a reference to it in a file named <code>.gitmodules</code>. Without that reference, the main project and the theme project aren&rsquo;t connected, which could cause confusion or problems down the line.</li>
<li><strong>Also, Git doesn&rsquo;t allow repos inside repos that aren&rsquo;t submodules.</strong> See <a href="https://wespeter.com/posts/avoiding-git-problems-when-installing-a-theme-to-hugo/">this &lsquo;simple dev&rsquo; post</a> for details.</li>
</ol>
<p>Let&rsquo;s solve each of those problems in one fell swoop.</p>
<ol>
<li>Make a fork of the <strong>Hello Friend</strong> theme so we have our own copy of it.</li>
</ol>
<figure class="align-center "><a href="img/fork-theme.jpg">
    <img loading="lazy" src="img/fork-theme.jpg#center"
         alt="fork a theme project on Github"/> </a>
</figure>

<ol start="2">
<li>Add our forked repo as a submodule in our main project&rsquo;s <code>themes</code> folder.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># Add the theme submodule from the root project folder</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># my sample URL - https://github.com/aormsby/F-hugo-theme-hello-friend.git</span>
</span></span><span style="display:flex;"><span>&gt; git submodule add https://github.com/<span style="color:#f92672">[</span>GITHUB_USERNAME<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>FORKED_THEME_REPO_NAME<span style="color:#f92672">]</span>.git themes/hello-friend
</span></span></code></pre></div><p>Boom! Now we have our own fork of a cool theme referenced as a submodule of our Hugo project. We can make any changes we want and push them to our own repo. I&rsquo;ll get into more advanced uses of theme submodules in another post, but for now we have the basics in place.</p>
<p>Things won&rsquo;t be <em>quite</em> right without tweaking a few final settings, so let&rsquo;s open the <code>config.toml</code> file in our project root so we can modify a few lines.</p>
<ol>
<li>Add a line so our site builds using our new theme.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">theme</span> = <span style="color:#e6db74">&#34;hello-friend&#34;</span>
</span></span></code></pre></div><ol start="2">
<li>Because we&rsquo;re making a Github &lsquo;project site&rsquo; we want to change the<code>baseURL</code> to match our project URL.</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-toml" data-lang="toml"><span style="display:flex;"><span><span style="color:#a6e22e">baseURL</span> = [<span style="color:#a6e22e">GITHUB_USER_NAME</span>].<span style="color:#a6e22e">github</span>.<span style="color:#a6e22e">io</span><span style="color:#960050;background-color:#1e0010">/</span>[<span style="color:#a6e22e">PROJECT_NAME</span>]
</span></span></code></pre></div><p>For example, mine will say <code>aormsby.github.io/hugo-gh-pages-public</code>. To understand the difference between setting up a project site and a user/organization site, see these <a href="https://pages.github.com/">Github Pages</a> and <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#github-user-or-organization-pages">Hugo</a> docs on the matter.</p>
<p>There are a lot more theme settings that can be adjusted in your config file, but you can explore those on your own. Let&rsquo;s deploy!</p>
<h2 id="test-site-and-deploy">Test Site and Deploy</h2>
<p>Running the terminal command <code>hugo server</code> in our project root spins up a local live preview of our site that can be viewed in a browser at <code>localhost:1313</code>. Run this now to check if our site is displaying anything (it should!), and then stop the process with <code>Ctrl+C</code>. Just like we did before, run the commands to build, commit, and push. <em>(Note that we didn&rsquo;t change anything in the theme, so we don&rsquo;t have to push anything in that repo.)</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>&gt; hugo
</span></span><span style="display:flex;"><span>&gt; cd public
</span></span><span style="display:flex;"><span>&gt; git add .
</span></span><span style="display:flex;"><span>&gt; git commit -m <span style="color:#e6db74">&#34;build with theme&#34;</span>
</span></span><span style="display:flex;"><span>&gt; cd ../
</span></span><span style="display:flex;"><span>&gt; git add .
</span></span><span style="display:flex;"><span>&gt; git commit -m <span style="color:#e6db74">&#34;build with theme - update submodule reference&#34;</span>
</span></span><span style="display:flex;"><span>&gt; git push -u origin master --recurse-submodules<span style="color:#f92672">=</span>on-demand
</span></span></code></pre></div><p>After a few minutes, refresh the live site at <code>https://[USER_NAME].github.io/hugo-gh-pages-public</code> and check out your new site! Congratulations, you&rsquo;ve done it!</p>
<h2 id="next-steps">Next Steps</h2>
<ul>
<li>
<p><strong>Theme Branches and Getting Updates</strong> - I&rsquo;ve worked out a nice branch-based system for continuing to get updates from the original theme repo while adding and changing things our forked theme repo. It&rsquo;s super useful. <a href="https://www.adamormsby.com/posts/000/hugo-themes-making-modifications/">Next post!</a></p>
</li>
<li>
<p><a href="https://www.adamormsby.com/posts/000/hugo-shell-deploy-script/"><strong>Better Deploy</strong></a> - I&rsquo;m sure you noticed that we had to use <em>a plethora</em> of terminal commands to add, commit, and push files to the main project and its submodules to maintain proper commit references. I wrote them out in this post for clarity, but this process is definitely something we can automate. Hugo&rsquo;s docs provide a <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#put-it-into-a-script">basic deploy script</a> to do this, and I&rsquo;m working on a greatly improved version of it that I&rsquo;ll write about when it&rsquo;s ready for action.</p>
</li>
<li>
<p><strong>Custom domains / CNAME</strong> - You may want to set up a custom domain on Github Pages. Here&rsquo;s <a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">some good documentation</a> on how to do that.</p>
</li>
</ul>
<p>Thanks for reading! ~</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
